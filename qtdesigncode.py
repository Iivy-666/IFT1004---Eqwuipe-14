import sys
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5 import QtWidgets as qtw
from PyQt5.QtWidgets import QDialog, QInputDialog, QLineEdit
from erreurs import LangueNonValideErreur, NombreJoueurInvalideErreur
# from qgis.gui import QgsMapCanvas

# Form implementation generated from reading ui file 'scrabble2.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(560, 230, 161, 141))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.jouer_bouton = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.jouer_bouton.setAutoDefault(False)
        self.jouer_bouton.setObjectName("jouer_bouton")
        self.verticalLayout.addWidget(self.jouer_bouton)
        self.passer_tour_boutton = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.passer_tour_boutton.setObjectName("passer_tour_boutton")
        self.verticalLayout.addWidget(self.passer_tour_boutton)
        self.sauvegarde_bouton = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.sauvegarde_bouton.setObjectName("sauvegarde_bouton")
        self.verticalLayout.addWidget(self.sauvegarde_bouton)
        self.quitter_bouton = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.quitter_bouton.setObjectName("quitter_bouton")
        self.verticalLayout.addWidget(self.quitter_bouton)
        # self.plateauScrabble = QgsMapCanvas(self.centralwidget)
        # self.plateauScrabble.setGeometry(QtCore.QRect(10, 0, 541, 511))
        # self.plateauScrabble.setAutoFillBackground(True)
        # self.plateauScrabble.setObjectName("plateauScrabble")
        self.verticalLayoutWidget_2 = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget_2.setGeometry(QtCore.QRect(560, 380, 160, 80))
        self.verticalLayoutWidget_2.setObjectName("verticalLayoutWidget_2")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_2)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.demarrer_bouton = QtWidgets.QPushButton(self.verticalLayoutWidget_2)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setKerning(True)
        font.setStyleStrategy(QtGui.QFont.PreferAntialias)
        self.demarrer_bouton.setFont(font)
        self.demarrer_bouton.setObjectName("demarrer_bouton")
        self.verticalLayout_2.addWidget(self.demarrer_bouton)
        self.continuer_partie_bouton = QtWidgets.QPushButton(self.verticalLayoutWidget_2)
        self.continuer_partie_bouton.setObjectName("continuer_partie_bouton")
        self.verticalLayout_2.addWidget(self.continuer_partie_bouton)
        self.formLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.formLayoutWidget.setGeometry(QtCore.QRect(560, 100, 231, 123))
        self.formLayoutWidget.setObjectName("formLayoutWidget")
        self.formLayout = QtWidgets.QFormLayout(self.formLayoutWidget)
        self.formLayout.setContentsMargins(0, 0, 0, 0)
        self.formLayout.setObjectName("formLayout")
        self.lineEdit_2 = QtWidgets.QLineEdit(self.formLayoutWidget)
        self.lineEdit_2.setEnabled(True)
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.formLayout.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.lineEdit_2)
        self.radioButton_4 = QtWidgets.QRadioButton(self.formLayoutWidget)
        self.radioButton_4.setCheckable(False)
        self.radioButton_4.setChecked(False)
        self.radioButton_4.setObjectName("radioButton_4")
        self.formLayout.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.radioButton_4)
        self.lineEdit_3 = QtWidgets.QLineEdit(self.formLayoutWidget)
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.formLayout.setWidget(1, QtWidgets.QFormLayout.FieldRole, self.lineEdit_3)
        self.radioButton_5 = QtWidgets.QRadioButton(self.formLayoutWidget)
        self.radioButton_5.setCheckable(False)
        self.radioButton_5.setChecked(False)
        self.radioButton_5.setObjectName("radioButton_5")
        self.formLayout.setWidget(2, QtWidgets.QFormLayout.LabelRole, self.radioButton_5)
        self.lineEdit_5 = QtWidgets.QLineEdit(self.formLayoutWidget)
        self.lineEdit_5.setObjectName("lineEdit_5")
        self.formLayout.setWidget(2, QtWidgets.QFormLayout.FieldRole, self.lineEdit_5)
        self.radioButton_6 = QtWidgets.QRadioButton(self.formLayoutWidget)
        self.radioButton_6.setCheckable(False)
        self.radioButton_6.setChecked(False)
        self.radioButton_6.setObjectName("radioButton_6")
        self.formLayout.setWidget(3, QtWidgets.QFormLayout.LabelRole, self.radioButton_6)
        self.lineEdit_6 = QtWidgets.QLineEdit(self.formLayoutWidget)
        self.lineEdit_6.setObjectName("lineEdit_6")
        self.formLayout.setWidget(3, QtWidgets.QFormLayout.FieldRole, self.lineEdit_6)
        self.radioButton_3 = QtWidgets.QRadioButton(self.formLayoutWidget)
        self.radioButton_3.setEnabled(False)
        self.radioButton_3.setAutoFillBackground(False)
        self.radioButton_3.setChecked(True)
        self.radioButton_3.setObjectName("radioButton_3")
        self.formLayout.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.radioButton_3)
        self.gridLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.gridLayoutWidget.setGeometry(QtCore.QRect(560, 10, 231, 80))
        self.gridLayoutWidget.setObjectName("gridLayoutWidget")
        self.gridLayout = QtWidgets.QGridLayout(self.gridLayoutWidget)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")
        self.lineEdit_8 = QtWidgets.QLineEdit(self.gridLayoutWidget)
        self.lineEdit_8.setObjectName("lineEdit_8")
        self.gridLayout.addWidget(self.lineEdit_8, 2, 1, 1, 1)
        self.lineEdit_7 = QtWidgets.QLineEdit(self.gridLayoutWidget)
        self.lineEdit_7.setObjectName("lineEdit_7")
        self.gridLayout.addWidget(self.lineEdit_7, 2, 0, 1, 1)
        self.label_5 = QtWidgets.QLabel(self.gridLayoutWidget)
        self.label_5.setObjectName("label_5")
        self.gridLayout.addWidget(self.label_5, 0, 0, 1, 1)
        self.lineEdit = QtWidgets.QLineEdit(self.gridLayoutWidget)
        self.lineEdit.setObjectName("lineEdit")
        self.gridLayout.addWidget(self.lineEdit, 1, 0, 1, 1)
        self.lineEdit_4 = QtWidgets.QLineEdit(self.gridLayoutWidget)
        self.lineEdit_4.setObjectName("lineEdit_4")
        self.gridLayout.addWidget(self.lineEdit_4, 1, 1, 1, 1)
        self.label_6 = QtWidgets.QLabel(self.gridLayoutWidget)
        self.label_6.setObjectName("label_6")
        self.gridLayout.addWidget(self.label_6, 0, 1, 1, 1)

        # MainWindow.setCentralWidget(self.centralwidget)
        # self.menubar = QtWidgets.QMenuBar(MainWindow)
        # self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 21))
        # self.menubar.setObjectName("menubar")
        # MainWindow.setMenuBar(self.menubar)

        # self.statusbar = QtWidgets.QStatusBar(MainWindow)
        # self.statusbar.setObjectName("statusbar")
        # MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.quitter_bouton.clicked.connect(MainWindow.close)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.jouer_bouton.clicked.connect(self.jouer_un_tour)
        self.passer_tour_boutton.clicked.connect(self.passer_tour)
        self.sauvegarde_bouton.clicked.connect(self.sauvegarder_partie)

        self.demarrer_bouton.clicked.connect(self.initialiser_jeu)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.jouer_bouton.setText(_translate("MainWindow", "Jouer"))
        self.passer_tour_boutton.setText(_translate("MainWindow", "Passer mon tour"))
        self.sauvegarde_bouton.setText(_translate("MainWindow", "Sauvegarder la partie"))
        self.quitter_bouton.setText(_translate("MainWindow", "Quitter"))
        self.demarrer_bouton.setText(_translate("MainWindow", "Démarrer une partie"))
        self.continuer_partie_bouton.setText(_translate("MainWindow", "Ouvrir une partie enregistrée"))
        self.radioButton_4.setText(_translate("MainWindow", "Joueur 2"))
        self.radioButton_5.setText(_translate("MainWindow", "Joueur 3"))
        self.radioButton_6.setText(_translate("MainWindow", "Joueur 4"))
        self.radioButton_3.setText(_translate("MainWindow", "Joueur 1"))
        self.label_5.setAccessibleDescription(_translate("MainWindow", "0"))
        self.label_5.setText(_translate("MainWindow", "Joueurs"))
        self.label_6.setText(_translate("MainWindow", "Pointage"))

    def jouer_un_tour(self):

        print('coucou')

    def passer_tour(self):

        print('passer un tour')

    def sauvegarder_partie(self):
        """
        Permet de sauvegarder l'objet courant dans le fichier portant le nom spécifié.
        La sauvegarde se fera grâce à la fonction dump du module pickle.

        Args:
            nom_fichier (str): Nom du fichier qui contient un objet scrabble.

        Returns:
            bool: True si la sauvegarde s'est bien déroulée,
                  False si une erreur est survenue durant la sauvegarde.
        """

        nom_fichier = 'fichier_partie.txt'
        try:
            with open(nom_fichier, 'wb') as f:
                pickle.dump(self, f)
        except:
            return False

        print('sauvegarde')
        return True


    def initialiser_jeu(self):
        """
        Étant donné un nombre de joueurs et une langue, cette méthode crée une partie de scrabble.

        Pour une nouvelle partie de scrabble:
        - La liste des joueurs est créée et chaque joueur porte automatiquement le nom Joueur 1, Joueur 2, ... Joueur n,
          où n est le nombre de joueurs;
        - Le joueur_actif est None.

        Args:
            nb_joueurs (int): nombre de joueurs de la partie (au minimun 2 au maximum 4).
            langue (str): 'FR' pour la langue française et 'EN' pour la langue anglaise. Charge en mémoire les mots
                          contenus dans le fichier "dictionnaire_francais.txt" ou "dictionnaire_anglais.txt".
            La langue détermine aussi les jetons de départ.
            Voir https://fr.wikipedia.org/wiki/Lettres_du_Scrabble
            Note: Dans notre scrabble, nous n'utiliserons pas les jetons blancs (jokers) qui ne contiennent aucune lettre.

        Raises:
            AssertionError:
                - Si la langue n'est ni 'fr', 'FR', 'en', ou 'EN'.
                - Si le nombre de joueurs n'est pas compris entre 2 et 4 (2 et 4 étant inclus).
        """

        nb_joueurs = QInputDialog.getInt(self, "Joueurs", "Entrer le nombre de joueur (valeur entre 2 et 4):", 2, 2, 4)
        nb_joueurs.exec()

        # if not 2 <= nb_joueurs <= 4:
        #     msg = QDialog("Nombre de joueur invalide", "Le nombre de joueur doit être entre 2 et 4.")
        #     msg.exec()
        #     raise NombreJoueurInvalideErreur()

        # langue = QInputDialog.getText(self, "Langue", "Language du jeu Francais (fr) ou Anglais (en)")
        langue = QDialog(self)
        langue.setWindowTitle("Langue")
        langue.setLabelText("Language du jeu Francais (fr) ou Anglais (en)")
        langue.exec()

        # if not langue.upper() in ['FR', 'EN']:
        #     msg = QDialog("Erreur de langue", "La langue choisie n'est pas disponible.")
        #     msg.exec()
        #     raise LangueNonValideErreur()

        # assert langue.upper() in ['FR', 'EN'], 'Langue non supportée.'
        # assert 2 <= nb_joueurs <= 4, 'Il faut entre 2 et 4 personnes pour jouer.'
        #
        # self.joueur_actif = None
        # self.joueurs = [Joueur(f'Joueur {i + 1}') for i in range(nb_joueurs)]
        #
        # if langue.upper() == 'FR':
        #     # Infos disponibles sur https://fr.wikipedia.org/wiki/Lettres_du_Scrabble
        #     data = [('E', 15, 1), ('A', 9, 1), ('I', 8, 1), ('N', 6, 1), ('O', 6, 1),
        #             ('R', 6, 1), ('S', 6, 1), ('T', 6, 1), ('U', 6, 1), ('L', 5, 1),
        #             ('D', 3, 2), ('M', 3, 2), ('G', 2, 2), ('B', 2, 3), ('C', 2, 3),
        #             ('P', 2, 3), ('F', 2, 4), ('H', 2, 4), ('V', 2, 4), ('J', 1, 8),
        #             ('Q', 1, 8), ('K', 1, 10), ('W', 1, 10), ('X', 1, 10), ('Y', 1, 10),
        #             ('Z', 1, 10)]
        #     chemin_fichier_dictionnaire = BASE_DIR / 'dictionnaire_francais.txt'
        # elif langue.upper() == 'EN':
        #     # Infos disponibles sur https://fr.wikipedia.org/wiki/Lettres_du_Scrabble
        #     data = [('E', 12, 1), ('A', 9, 1), ('I', 9, 1), ('N', 6, 1), ('O', 8, 1),
        #             ('R', 6, 1), ('S', 4, 1), ('T', 6, 1), ('U', 4, 1), ('L', 4, 1),
        #             ('D', 4, 2), ('M', 2, 3), ('G', 3, 2), ('B', 2, 3), ('C', 2, 3),
        #             ('P', 2, 3), ('F', 2, 4), ('H', 2, 4), ('V', 2, 4), ('J', 1, 8),
        #             ('Q', 1, 10), ('K', 1, 5), ('W', 2, 4), ('X', 1, 8), ('Y', 2, 4),
        #             ('Z', 1, 10)]
        #     chemin_fichier_dictionnaire = BASE_DIR / 'dictionnaire_anglais.txt'
        #
        # self.jetons_libres = [Jeton(lettre, valeur) for lettre, occurences, valeur in data for i in range(occurences)]
        # with open(chemin_fichier_dictionnaire, 'r') as f:
        #     self.dictionnaire = [x[:-1].upper() for x in f.readlines() if len(x[:-1]) > 1]
        #
        # self.joueur_suivant()

if __name__ == '__main__':
    app = qtw.QApplication(sys.argv)
    mw = Ui_MainWindow()
    sys.exit(app.exec())



